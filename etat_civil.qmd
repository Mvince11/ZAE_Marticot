---
title: ""
format:
  dashboard:
    orientation: rows
editor: visual
expandable: true
layout: "grid"
scrolling: true
---

```{r setup, include=FALSE}
# Chargement des packages
library(tidyverse)
library(readr)

# Lecture du fichier CSV
donnees <- read_csv("data/results-survey337264.csv", show_col_types = FALSE)%>%
  drop_na(`Date de soumission`)
```

<h1 style="font-size:1.4em;">

Volet état civil

</h1>

```{=html}
Voici quelques statistiques issues du questionnaire
```

## Row {height="13%"}

```{r}
#| echo: false

library(dplyr)
library(ggplot2)
library(plotly)
library(htmlwidgets)

# Préparation des données
df_genre <- donnees %>%
  count(Genre = `Quel est votre genre ?  Veuillez cocher une case`) %>%
  mutate(
    Genre = case_when(
      is.na(Genre) | Genre == "N/A" ~ "Sans réponse",
      TRUE ~ Genre
    ),
    Total = sum(n),
    Pourcent = round(100 * n / Total, 1)
  )

# Graphique ggplot (sans titre, style épuré)
p_genre <- ggplot(df_genre, aes(
    x = reorder(Genre, n),
    y = n,
    fill = Genre,
    text = paste(
      "Genre :", Genre,
      "<br>Réponses :", n,
      "<br>Pourcentage :", Pourcent, "%"
    )
  )) +
  geom_col(show.legend = FALSE) +
  coord_flip() +  # diagramme horizontal
  labs(
    x = "Genre",
    y = "Nombre de réponses",
    fill = NULL
  ) +
  theme_minimal() +
  theme(
    axis.title.x = element_text(size = 9),
    axis.title.y = element_text(size = 9),
    axis.text.x = element_text(size = 8),
    axis.text.y = element_text(size = 8)
  )

# Graphique interactif avec titre responsif
p_genre_plotly <- ggplotly(p_genre, tooltip = "text") %>%
  layout(
    title = list(
      text = "Répartition des réponses par genre",
      x = 0.5,             # centré horizontalement
      xanchor = "center",
      yanchor = "top",
      font = list(color = "red") # couleur rouge comme demandé
    ),
    margin = list(t = 60, b = 60)
  ) %>%
  config(responsive = TRUE) %>%
  onRender("
    function(el, x) {
      function resize() {
        var w = el.offsetWidth;
        var newSize = Math.max(10, Math.min(20, w/40)); // taille adaptative
        Plotly.relayout(el, {'title.font.size': newSize});
      }
      window.addEventListener('resize', resize);
      resize();
    }
  ")

p_genre_plotly

```

## Row {height="17%"}

```{r}
#| echo: false

library(dplyr)
library(ggplot2)
library(plotly)
library(htmlwidgets)

# Préparation des données âge
df_age <- donnees %>%
  count(Age = `Quel est votre âge ?`) %>%
  mutate(
    Age_num = suppressWarnings(as.numeric(as.character(Age))), # conversion en numérique si possible
    Age = case_when(
      is.na(Age_num) & (is.na(Age) | Age == "N/A") ~ "Sans réponse",
      TRUE ~ as.character(Age)
    ),
    Total = sum(n),
    Pourcent = round(100 * n / Total, 1)
  ) %>%
  arrange(Age_num, Age)   # trier par âge croissant

# Forcer l'ordre des modalités pour l'affichage
df_age$Age <- factor(df_age$Age, levels = unique(df_age$Age))

# Graphique ggplot
p_age <- ggplot(df_age, aes(
    x = Age,   # ordre respecté
    y = n,
    fill = Age,
    text = paste(
      "Âge :", Age,
      "<br>Réponses :", n,
      "<br>Pourcentage :", Pourcent, "%"
    )
  )) +
  geom_col(show.legend = FALSE) +
  coord_flip() +
  labs(
    x = "Âge",
    y = "Nombre de réponses"
  ) +
  theme_minimal() +
  theme(
    axis.title.x = element_text(size = 9),
    axis.title.y = element_text(size = 9),
    axis.text.x = element_text(size = 8),
    axis.text.y = element_text(size = 8)
  )

# Graphique interactif sans légende + titre responsif
p_age_plotly <- ggplotly(p_age, tooltip = "text") %>%
  layout(
    showlegend = FALSE,
    title = list(
      text = "Répartition des réponses par âge",
      x = 0.5,
      xanchor = "center",
      yanchor = "top",
      font = list(color = "red")
    ),
    margin = list(t = 60, b = 60)
  ) %>%
  config(responsive = TRUE) %>%
  onRender("
    function(el, x) {
      function resize() {
        var w = el.offsetWidth;
        var newSize = Math.max(10, Math.min(20, w/40));
        Plotly.relayout(el, {'title.font.size': newSize});
      }
      window.addEventListener('resize', resize);
      resize();
    }
  ")

p_age_plotly


```

## Row {height="20%"}

```{r}
#| echo: false

library(dplyr)
library(ggplot2)
library(plotly)
library(htmlwidgets)

# Préparation des données âge + genre
df_age_genre <- donnees %>%
  rename(Genre = `Quel est votre genre ?  Veuillez cocher une case`) %>%
  count(Age = `Quel est votre âge ?`, Genre) %>%
  mutate(
    Age_num = suppressWarnings(as.numeric(as.character(Age))), # conversion en numérique si possible
    Age = case_when(
      is.na(Age_num) & (is.na(Age) | Age == "N/A") ~ "Sans réponse",
      TRUE ~ as.character(Age)
    ),
    Total = sum(n),
    Pourcent = round(100 * n / Total, 1),
    Genre = case_when(
      is.na(Genre) | Genre == "N/A" ~ "Sans réponse",
      TRUE ~ Genre
    )
  ) %>%
  arrange(Age_num, Age)

# Forcer l'ordre croissant des âges
df_age_genre$Age <- factor(df_age_genre$Age, levels = unique(df_age_genre$Age))

# Graphique ggplot
p_age_genre <- ggplot(df_age_genre, aes(
    x = Age,
    y = n,
    fill = Genre,
    text = paste(
      "Âge :", Age,
      "<br>Genre :", Genre,
      "<br>Réponses :", n,
      "<br>Pourcentage :", Pourcent, "%"
    )
  )) +
  geom_col(position = "dodge") +
  labs(
    x = "Âge",
    y = "Nombre de réponses",
    fill = NULL
  ) +
  theme_minimal() +
  theme(
    axis.title.x = element_text(size = 9),
    axis.title.y = element_text(size = 9),
    axis.text.x = element_text(size = 8),
    axis.text.y = element_text(size = 8),
    legend.title = element_text(size = 8),
    legend.text = element_text(size = 7)
  )

# Graphique interactif avec titre rouge responsif
p_age_genre_plotly <- ggplotly(p_age_genre, tooltip = "text") %>%
  layout(
    title = list(
      text = "Répartition des réponses par âge et par genre",
      x = 0.5,
      xanchor = "center",
      yanchor = "top",
      font = list(color = "red")
    ),
    legend = list(
      orientation = "h",    # légende horizontale
      x = 0.5, xanchor = "center",
      y = -0.3, yanchor = "top"
    ),
    margin = list(t = 60, b = 80)
  ) %>%
  config(responsive = TRUE) %>%
  onRender("
    function(el, x) {
      function resize() {
        var w = el.offsetWidth;
        var newSize = Math.max(10, Math.min(20, w/40));
        Plotly.relayout(el, {'title.font.size': newSize});
      }
      window.addEventListener('resize', resize);
      resize();
    }
  ")

p_age_genre_plotly

```

## Row {height="15%"}

```{r}
#| echo: false

library(dplyr)
library(ggplot2)
library(plotly)
library(htmlwidgets)

# Préparation des données
df_csp <- donnees %>%
  count(CSP = `Quelle est votre catégorie socio-professionnelle ?`) %>%
  mutate(
    CSP = case_when(
      is.na(CSP) | CSP == "N/A" ~ "Sans réponse",
      TRUE ~ as.character(CSP)
    ),
    Total = sum(n),
    Pourcent = round(100 * n / Total, 1)
  ) %>%
  arrange(desc(n))   # tri par effectif décroissant (modifiable)

# Graphique ggplot
p_csp <- ggplot(df_csp, aes(
    x = reorder(CSP, n),
    y = n,
    fill = CSP,
    text = paste(
      "Catégorie :", CSP,
      "<br>Réponses :", n,
      "<br>Pourcentage :", Pourcent, "%"
    )
  )) +
  geom_col(show.legend = FALSE) +
  coord_flip() +
  labs(
    x = "Catégorie socio-professionnelle",
    y = "Nombre de réponses"
  ) +
  theme_minimal() +
  theme(
    axis.title.x = element_text(size = 9),
    axis.title.y = element_text(size = 9),
    axis.text.x = element_text(size = 8),
    axis.text.y = element_text(size = 8)
  )

# Graphique interactif sans légende + titre rouge responsif
p_csp_plotly <- ggplotly(p_csp, tooltip = "text") %>%
  layout(
    showlegend = FALSE,
    title = list(
      text = "Répartition des réponses par catégorie socio-professionnelle",
      x = 0.5,
      xanchor = "center",
      yanchor = "top",
      font = list(color = "red")
    ),
    margin = list(t = 80, b = 60)
  ) %>%
  config(responsive = TRUE) %>%
  onRender("
    function(el, x) {
      function resize() {
        var w = el.offsetWidth;
        var newSize = Math.max(10, Math.min(18, w/40));
        Plotly.relayout(el, {'title.font.size': newSize});
      }
      window.addEventListener('resize', resize);
      resize();
    }
  ")

p_csp_plotly

```

## Row {height="15%"}

```{r}
#| echo: false

library(dplyr)
library(ggplot2)
library(plotly)
library(htmlwidgets)

# Préparation des données
df_csp_autre <- donnees %>%
  drop_na(`Quelle est votre catégorie socio-professionnelle ? [Autre]`) %>%
  count(CSP_Autre = `Quelle est votre catégorie socio-professionnelle ? [Autre]`) %>%
  mutate(
    CSP_Autre = as.character(CSP_Autre),
    Total = sum(n),
    Pourcent = round(100 * n / Total, 1)
  ) %>%
  arrange(desc(n))

# Graphique ggplot
p_csp_autre <- ggplot(df_csp_autre, aes(
    x = reorder(CSP_Autre, n),
    y = n,
    fill = CSP_Autre,
    text = paste(
      "Réponse :", CSP_Autre,
      "<br>Nombre :", n,
      "<br>Pourcentage :", Pourcent, "%"
    )
  )) +
  geom_col(show.legend = FALSE) +
  coord_flip() +
  labs(
    x = "Catégorie socio-professionnelle (Autre)",
    y = "Nombre de réponses"
  ) +
  theme_minimal() +
  theme(
    axis.title.x = element_text(size = 9),
    axis.title.y = element_text(size = 9),
    axis.text.x = element_text(size = 8),
    axis.text.y = element_text(size = 8)
  )

# Graphique interactif sans légende + titre rouge responsif
p_csp_autre_plotly <- ggplotly(p_csp_autre, tooltip = "text") %>%
  layout(
    showlegend = FALSE,
    title = list(
      text = "Répartition des réponses par catégorie socio-professionnelle (Autre)",
      x = 0.5,
      xanchor = "center",
      yanchor = "top",
      font = list(color = "red")
    ),
    margin = list(t = 80, b = 60)
  ) %>%
  config(responsive = TRUE) %>%
  onRender("
    function(el, x) {
      function resize() {
        var w = el.offsetWidth;
        var newSize = Math.max(10, Math.min(18, w/40));
        Plotly.relayout(el, {'title.font.size': newSize});
      }
      window.addEventListener('resize', resize);
      resize();
    }
  ")

p_csp_autre_plotly

```

## Row {height="20%" .tabset }

```{r}
#| include: false

library(sf)
library(dplyr)

##### Script utile pour joindre les géométries des communes #####
# communes <- st_read("data/COMMUNE.shp")
# communes_33_40 <- communes %>% filter(INSEE_DEP %in% c("33", "40")) %>% select(NOM_M,geometry)
# st_write(communes_33_40, "data/commune_33_40.geojson")
# communes_33_40 <- st_read("data/commune_33_40.geojson")%>%
#    rename("Dans quelle commune vivez-vous ?" = NOM_M )
# # 
#  donnees <- donnees %>%
#    mutate(`Dans quelle commune vivez-vous ?` = sub(" [0-9]{5}$", "", `Dans quelle commune vivez-vous ?`))%>%
#    mutate(`Dans quelle commune vivez-vous ?` = case_when(
#      `Dans quelle commune vivez-vous ?` == "ST MEDARD EN JALLES" ~ "SAINT-MEDARD-EN-JALLES",
#      `Dans quelle commune vivez-vous ?` == "BAYON SUR GIRONDE" ~ "BAYON-SUR-GIRONDE",
#      `Dans quelle commune vivez-vous ?` == "BELIN BELIET" ~ "BELIN-BELIET",
#      `Dans quelle commune vivez-vous ?` == "CAMBLANES ET MEYNAC" ~ "CAMBLANES-ET-MEYNAC",
#      `Dans quelle commune vivez-vous ?` == "CARIGNAN DE BORDEAUX" ~ "CARIGNAN-DE-BORDEAUX",
#      `Dans quelle commune vivez-vous ?` == "CARBON BLANC" ~ "CARBON-BLANC",
#      `Dans quelle commune vivez-vous ?` == "GIRONDE SUR DROPT" ~ "GIRONDE-SUR-DROPT",
#      `Dans quelle commune vivez-vous ?` == "LA TESTE DE BUCH" ~ "LA TESTE-DE-BUCH",
#      `Dans quelle commune vivez-vous ?` == "LE PIAN SUR GARONNE" ~ "LE PIAN-SUR-GARONNE",
#      `Dans quelle commune vivez-vous ?` == "LEGE CAP FERRET" ~ "LEGE-CAP-FERRET",
#      `Dans quelle commune vivez-vous ?` == "LUDON MEDOC" ~ "LUDON-MEDOC",
#      `Dans quelle commune vivez-vous ?` == "MARTIGNAS SUR JALLE" ~ "MARTIGNAS-SUR-JALLE",
#      `Dans quelle commune vivez-vous ?` == "ST CAPRAIS DE BORDEAUX" ~ "SAINT-CAPRAIS-DE-BORDEAUX",
#      `Dans quelle commune vivez-vous ?` == "ST JEAN D ILLAC" ~ "SAINT-JEAN-D'ILLAC",
#      `Dans quelle commune vivez-vous ?` == "ST LEGER DE BALSON" ~ "SAINT-LEGER-DE-BALSON",
#      `Dans quelle commune vivez-vous ?` == "ST MAGNE" ~ "SAINT-MAGNE",
#      `Dans quelle commune vivez-vous ?` == "ST MORILLON" ~ "SAINT-MORILLON",
#      `Dans quelle commune vivez-vous ?` == "ST QUENTIN DE BARON" ~ "SAINT-QUENTIN-DE-BARON",
#      `Dans quelle commune vivez-vous ?` == "ST SELVE" ~ "SAINT-SELVE",
#      `Dans quelle commune vivez-vous ?` == "VILLENAVE D ORNON" ~ "VILLENAVE-D'ORNON",
#      TRUE ~ `Dans quelle commune vivez-vous ?`
#    ))
# # 
#  question_commune <- donnees %>%
#    left_join(communes_33_40, by = "Dans quelle commune vivez-vous ?")
# # 
#  st_write(question_commune, "data/question_commune.geojson", append = TRUE)

question_commune <- st_read("data/question_commune.geojson") %>%
   rename(`Dans quelle commune vivez vous ?` = `Dans.quelle.commune.vivez.vous..`)
```

```{r}
#| echo: false
#| title: "Carte des flux domiciles/travail"
#| color: red
#| fig.height: 6   # hauteur en pouces (~450px)
#| fig.width: 8    # largeur en pouces

  
library(sf)
library(dplyr)
library(tidyverse)
library(leaflet)

# --- 1. Coordonnées de destination : Cestas Marticot
dest_lon <- -0.69112
dest_lat <- 44.75134
destination <- st_sf(
  nom = "Cestas - Zone économique de Marticot",
  geometry = st_sfc(st_point(c(dest_lon, dest_lat)), crs = 4326)
)

 donnees <- donnees %>%
   mutate(`Dans quelle commune vivez-vous ?` = sub(" [0-9]{5}$", "", `Dans quelle commune vivez-vous ?`))
# --- 2. Compter le nombre de réponses par commune
nb_reponses <- donnees %>%
  count(`Dans quelle commune vivez-vous ?`, name = "nb_reponses")%>%
    mutate(`Dans quelle commune vivez-vous ?` = sub(" [0-9]{5}$", "", `Dans quelle commune vivez-vous ?`))%>%
    mutate(`Dans quelle commune vivez-vous ?` = case_when(
      `Dans quelle commune vivez-vous ?` == "ST MEDARD EN JALLES" ~ "SAINT-MEDARD-EN-JALLES",
      `Dans quelle commune vivez-vous ?` == "BAYON SUR GIRONDE" ~ "BAYON-SUR-GIRONDE",
      `Dans quelle commune vivez-vous ?` == "BELIN BELIET" ~ "BELIN-BELIET",
      `Dans quelle commune vivez-vous ?` == "CAMBLANES ET MEYNAC" ~ "CAMBLANES-ET-MEYNAC",
      `Dans quelle commune vivez-vous ?` == "CARIGNAN DE BORDEAUX" ~ "CARIGNAN-DE-BORDEAUX",
      `Dans quelle commune vivez-vous ?` == "CARBON BLANC" ~ "CARBON-BLANC",
      `Dans quelle commune vivez-vous ?` == "GIRONDE SUR DROPT" ~ "GIRONDE-SUR-DROPT",
      `Dans quelle commune vivez-vous ?` == "LA TESTE DE BUCH" ~ "LA TESTE-DE-BUCH",
      `Dans quelle commune vivez-vous ?` == "LE PIAN SUR GARONNE" ~ "LE PIAN-SUR-GARONNE",
      `Dans quelle commune vivez-vous ?` == "LEGE CAP FERRET" ~ "LEGE-CAP-FERRET",
      `Dans quelle commune vivez-vous ?` == "LUDON MEDOC" ~ "LUDON-MEDOC",
     `Dans quelle commune vivez-vous ?` == "MARTIGNAS SUR JALLE" ~ "MARTIGNAS-SUR-JALLE",
      `Dans quelle commune vivez-vous ?` == "ST CAPRAIS DE BORDEAUX" ~ "SAINT-CAPRAIS-DE-BORDEAUX",
      `Dans quelle commune vivez-vous ?` == "ST JEAN D ILLAC" ~ "SAINT-JEAN-D'ILLAC",
      `Dans quelle commune vivez-vous ?` == "ST LEGER DE BALSON" ~ "SAINT-LEGER-DE-BALSON",
      `Dans quelle commune vivez-vous ?` == "ST MAGNE" ~ "SAINT-MAGNE",
      `Dans quelle commune vivez-vous ?` == "ST MORILLON" ~ "SAINT-MORILLON",
      `Dans quelle commune vivez-vous ?` == "ST QUENTIN DE BARON" ~ "SAINT-QUENTIN-DE-BARON",
      `Dans quelle commune vivez-vous ?` == "ST SELVE" ~ "SAINT-SELVE",
      `Dans quelle commune vivez-vous ?` == "VILLENAVE D ORNON" ~ "VILLENAVE-D'ORNON",
      TRUE ~ `Dans quelle commune vivez-vous ?`
    )) %>%
  mutate(pct = round(100 * nb_reponses / sum(nb_reponses), 1))   # <-- pourcentage



# --- 3. Extraire les centroïdes et joindre le comptage
communes_centroides <- question_commune %>%
  st_centroid() %>%
  st_transform(4326) %>%
  #rename(`Dans quelle commune vivez vous ?` = `Dans.quelle.commune.vivez.vous..`) %>%
  mutate(
    lon = st_coordinates(.)[, 1],
    lat = st_coordinates(.)[, 2]
  ) %>%
  filter(!is.na(lon), !is.na(lat), lon >= -180, lon <= 180, lat >= -90, lat <= 90) %>%
  left_join(nb_reponses, 
            by = c("Dans quelle commune vivez vous ?" = "Dans quelle commune vivez-vous ?")) %>%
  rename(commune = `Dans quelle commune vivez vous ?`)

# --- 4. Création des lignes depuis chaque commune vers la destination
flux <- purrr::map2(
  communes_centroides$lon, communes_centroides$lat,
  ~ st_linestring(matrix(c(.x, dest_lon, .y, dest_lat), ncol = 2, byrow = FALSE))
) %>%
  st_sfc(crs = 4326) %>%
  st_sf(
    commune = communes_centroides$commune,
    nb_reponses = communes_centroides$nb_reponses,
    pct = communes_centroides$pct,
    geometry = .
  )

# --- 5. Carte Leaflet
m <- leaflet() %>%
  addTiles(group = "OpenStreetMap") %>%
  addTiles(
    "https://data.geopf.fr/wmts?REQUEST=GetTile&SERVICE=WMTS&VERSION=1.0.0&STYLE=normal&TILEMATRIXSET=PM&FORMAT=image/jpeg&LAYER=ORTHOIMAGERY.ORTHOPHOTOS&TILEMATRIX={z}&TILEROW={y}&TILECOL={x}",
    options = c(WMSTileOptions(tileSize = 256), providerTileOptions(minZoom = 1, maxZoom = 22)),
    attribution = '<a target="_blank" href="https://www.geoportail.gouv.fr/">Geoportail France</a>',
    group = "Ortho IGN"
  ) %>%
  addScaleBar(position = "bottomleft", options = scaleBarOptions(metric = TRUE, imperial = FALSE)) %>%
  addLayersControl(position = "topright", baseGroups = c("OpenStreetMap", "Ortho IGN")) %>%
  
  # Flux : épaisseur proportionnelle au nombre de réponses
  addPolylines(
    data = flux,
    color = "red",
    weight = ~ifelse(is.na(nb_reponses), 1, nb_reponses / 2),
    opacity = 0.7,
    popup = ~paste0("<b>", commune, "</b><br>",
                  "Réponses : ", nb_reponses, "<br>",
                  "Part : ", pct, "%")
  ) %>%
  
  # Communes
  addCircleMarkers(
    data = communes_centroides,
    lng = ~lon, lat = ~lat,
    radius = 3, color = "black", fillColor = "orange", fillOpacity = 0.8,
    popup = ~paste0("<b>", commune, "</b><br>",
                  "Réponses : ", nb_reponses, "<br>",
                  "Part : ", pct, "%")
  ) %>%
  
  # Destination
  addCircleMarkers(
    data = destination,
    color = "blue", fillColor = "blue", radius = 6, fillOpacity = 1,
    popup = ~nom
  )

m

```

```{r}
#| title: "Tableau récapitulatif"



library(dplyr)
library(DT)

# Renommer et trier
table_trajets <- nb_reponses %>%
  rename(
    Commune = `Dans quelle commune vivez-vous ?`,
    `Nombre de trajets` = nb_reponses,
    `Pourcentages` = pct
  ) %>%
  arrange(desc(`Nombre de trajets`))

datatable(
  table_trajets,
  #extensions = 'Buttons',
  options = list(
    pageLength = 15,
    autoWidth = TRUE,
    order = list(list(1, 'desc')),
    dom = 'Bfrtip',
    #buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
    columnDefs = list(
      list(width = '200px', targets = 0),   # largeur colonne "Commune"
      list(width = '120px', targets = 1),   # largeur colonne "Nombre de trajets"
      list(width = '120px', targets = 2),   # largeur colonne "Pourcentages"
      list(className = 'dt-center', targets = c(1,2))
  )
  ),
  rownames = FALSE
) %>%
  formatStyle(
    "Nombre de trajets",
    backgroundColor = styleInterval(
      c(5, 10),
      c('#fff7ec', '#fd8d3c', '#e31a1c')
    ),
    color = "black",
    fontWeight = "bold"
  )

```

## Column {expandable="false"}

```{=html}
Flux domicile/travail
```

