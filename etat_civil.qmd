---
title: ""
# format:
#   dashboard:
#     orientation: rows
# editor: visual
# expandable: true
# layout: "grid"
# scrolling: true
lang: fr
toc: true
toc-depth: 4
---

```{r}
#| include: FALSE
# Chargement des packages
library(tidyverse)
library(readr)
library(readxl)

# Lecture du fichier CSV
donnees <- read_excel("data/Classeur1.xlsx")
  #drop_na(`Date de soumission`)
```

## 2. PROFIL DE l’ÉCHANTILLON

Comme évoqué notre échantillon finale de notre questionnaire est de 325 réponses, représentant environ [20%] de l’ensemble des salariés de la zone (estimée entre 1000 et 1500 salariés).

### 2.1 Le genre

La population salariée de la zone de Marticot apparaît majoritairement masculine, ce qui reflète probablement la nature des activités implantées (industrie, logistique, artisanat) traditionnellement plus masculinisées. Cette part supérieur est aussi importante à corréler avec la forte présence de CSP de cadres et professions intellectuelles supérieures qui représentent 66% environ des répondant au questionnaire. D’après les chiffres CSP en emploi de l’INSEE en 2024, 25,4%  sont des hommes et 20,4% sont des femmes. Les hommes sont proportionnellement plus nombreux parmi les cadres et les ouvriers qualifiés (INSEE, 2024).  
Le profil de la zone de Marticot, caractérisé par une forte proportion de cadres et une majorité d’hommes, traduit donc une composition socioprofessionnelle spécifique à cette ZAE, qui ne reflète pas la structure nationale mais plutôt les caractéristiques économiques locales (présence d’ETI, activités industrielles, logistiques et de services spécialisés).Ce déséquilibre peut influencer les perceptions entre genre mais aussi en CSP au vu de ces 2 surreprésentations dans l’échantillon. Celui-ci reste représentatif de la réalité puisqu’il s’agit d’une réalité factuelle de la zone mais il ne pas négliger les sous représentations. Notamment en terme de CSP.


```{r}
#| include: FALSE

library(dplyr)
library(ggplot2)
library(plotly)
library(htmlwidgets)
```

```{r}
#| echo: false

df_genre <- donnees %>%
  count(Genre) %>%
  mutate(
    Genre = case_when(
      is.na(Genre) | Genre == "N/A" ~ "Sans réponse",
      TRUE ~ Genre
    ),
    Total = sum(n),
    Pourcent = round(100 * n / Total, 1),
    label = paste0(Genre, " (", Pourcent, "%)")
  )

# Graphique interactif avec total par catégorie
plot_ly(
  data = df_genre,
  labels = ~Genre,
  values = ~n,  # Utiliser le nombre brut de réponses
  type = "pie",
  textinfo = "label",  # Affiche label, %, et total
  hoverinfo = "label+value+percent",
  hole= 0.4,
  marker = list(line = list(color = "#FFFFFF", width = 1))
) %>%
  layout(
    title = list(
      text = "Répartition des réponses par genre",
      x = 0.5,
      xanchor = "center",
      font = list(color = "red")
    ),
    margin = list(t = 60, b = 60)
  ) %>%
  config(responsive = TRUE)



```

### 2.2 L’âge

Dans notre échantillon de 325 répondants, L’âge moyen s’établit à 43,3 ans, tandis que la médiane, très proche (44 ans), confirme une distribution centrée autour de la quarantaine. L’écart-type de 11 ans indique toutefois une certaine diversité d’âges, avec des salariés allant de 21 à 63 ans. Le mode (valeur la plus fréquente) se situe à 53 ans, ce qui suggère la présence notable de salariés plus âgés, souvent expérimentés. Le graphique confirme visuellement cette tendance :  

La tranche des 40-49 ans concentre le plus grand nombre d’effectifs, ce qui en fait le cœur de la population active de la ZAE. Cette surreprésentation traduit une main-d’œuvre en pleine maturité professionnelle, occupant souvent des postes qualifiés ou de responsabilité.

Les 30-39 ans et 50-59 ans forment des groupes secondaires importants, témoignant d’une bonne continuité générationnelle et d’un renouvellement progressif.

À l’inverse, les moins de 30 ans et les plus de 60 ans sont minoritaires, traduisant une faible proportion de jeunes entrants et de salariés proches de la retraite encore en activité.

La ZAE de Marticot présente une structure d’âge équilibrée mais vieillissante, dominée par les salariés de 40 à 50 ans, avec une représentation limitée des jeunes actifs. Cette configuration reflète le profil typique d’une zone industrielle établie, où la stabilité des emplois et la technicité des postes favorisent la fidélisation et la longévité professionnelle.

```{r}
#| echo: false

library(dplyr)
library(ggplot2)
library(plotly)
library(htmlwidgets)

#summary(as.numeric(donnees$`Quel est votre âge ?`))

df_age <- donnees %>%
  mutate(
    Age_num = suppressWarnings(as.numeric(as.character(`X2 age...3`))),
    Tranche = case_when(
      is.na(Age_num) ~ "Sans réponse",
      Age_num >= 20 & Age_num <= 29 ~ "20-29",
      Age_num >= 30 & Age_num <= 39 ~ "30-39",
      Age_num >= 40 & Age_num <= 49 ~ "40-49",
      Age_num >= 50 & Age_num <= 59 ~ "50-59",
      Age_num >= 60 & Age_num <= 69 ~ "60-69",
      TRUE ~ "Autres"
    )
  ) %>%
  count(Tranche) %>%
  mutate(
    Total = sum(n),
    Pourcent = round(100 * n / Total, 1),
    Tranche = factor(Tranche, levels = c("20-29", "30-39", "40-49", "50-59", "60-69", "Autres", "Sans réponse"))
  )

# Graphique ggplot vertical
p_age <- ggplot(df_age, aes(
    x = Tranche,
    y = n,
    fill = Tranche,
    text = paste(
      "Tranche :", Tranche,
      "<br>Réponses :", n,
      "<br>Pourcentage :", Pourcent, "%"
    )
  )) +
  geom_col(show.legend = FALSE) +
  labs(
    x = "Tranche d'âge",
    y = "Nombre de réponses"
  ) +
  theme_minimal() +
  theme(
    axis.title.x = element_text(size = 9),
    axis.title.y = element_text(size = 9),
    axis.text.x = element_text(size = 8),
    axis.text.y = element_text(size = 8)
  )

# Graphique interactif avec titre responsif
p_age_plotly <- ggplotly(p_age, tooltip = "text") %>%
  layout(
    showlegend = FALSE,
    title = list(
      text = "Répartition des réponses par tranche d'âge",
      x = 0.5,
      xanchor = "center",
      yanchor = "top",
      font = list(color = "red")
    ),
    margin = list(t = 60, b = 60)
  ) %>%
  config(responsive = TRUE) %>%
  onRender("
    function(el, x) {
      function resize() {
        var w = el.offsetWidth;
        var newSize = Math.max(10, Math.min(20, w/40));
        Plotly.relayout(el, {'title.font.size': newSize});
      }
      window.addEventListener('resize', resize);
      resize();
    }
  ")

p_age_plotly


```

### 2.3 La catégorie socio-professionelle (CSP)


```{r}
#| echo: false

library(dplyr)
library(ggplot2)
library(plotly)
library(htmlwidgets)

# Préparation des données
# Préparation des données
df_csp <- donnees %>%
  count(CSP = `X3 csp autre`) %>%
  mutate(
    CSP = case_when(
      is.na(CSP) | CSP == "N/A" ~ "Sans réponse",
      TRUE ~ as.character(CSP)
    ),
    Total = sum(n),
    Pourcent = round(100 * n / Total, 1)
  ) %>%
  arrange(desc(n))  # tri par effectif décroissant

# Forcer l’ordre des catégories dans le bon sens
df_csp$CSP <- factor(df_csp$CSP, levels = df_csp$CSP)

# Graphique ggplot vertical
p_csp <- ggplot(df_csp, aes(
    x = CSP,
    y = n,
    fill = CSP,
    text = paste(
      "Catégorie :", CSP,
      "<br>Réponses :", n,
      "<br>Pourcentage :", Pourcent, "%"
    )
  )) +
  geom_col(show.legend = FALSE) +
  labs(
    x = "Catégorie socio-professionnelle",
    y = "Nombre de réponses"
  ) +
  theme_minimal() +
  theme(
    axis.title.x = element_text(size = 9),
    axis.title.y = element_text(size = 9),
    axis.text.x = element_text(size = 8, angle = 45, hjust = 1),
    axis.text.y = element_text(size = 8)
  )

# Graphique interactif avec titre rouge responsif
p_csp_plotly <- ggplotly(p_csp, tooltip = "text") %>%
  layout(
    showlegend = FALSE,
    title = list(
      text = "Répartition des réponses par catégorie socio-professionnelle",
      x = 0.5,
      xanchor = "center",
      yanchor = "top",
      font = list(color = "red")
    ),
    margin = list(t = 80, b = 80)
  ) %>%
  config(responsive = TRUE) %>%
  onRender("
    function(el, x) {
      function resize() {
        var w = el.offsetWidth;
        var newSize = Math.max(10, Math.min(18, w/40));
        Plotly.relayout(el, {'title.font.size': newSize});
      }
      window.addEventListener('resize', resize);
      resize();
    }
  ")

p_csp_plotly

```

Les cadres et professions intellectuelles supérieures représentent 66 % des répondants, suivis par les employés (24 %) et les ouvriers (6 %). Les professions intermédiaires sont très minoritaires (2 %). Quelques cas isolés apparaissent (artisans, CEO, agents d’exploitation, surveillants de travaux)
La forte présence de cadres témoigne de l’importance d’entreprises de taille intermédiaire (ETI) et de secteurs à forte valeur ajoutée (comme Lectra). Cela traduit un profil socio-économique élevé, susceptible de générer des attentes fortes en matière de services, de mobilité et de qualité de vie au travail. La présence non négligeable d’employés et d’ouvriers rappelle toutefois que les besoins sont variés et qu’une politique de requalification devra concilier des profils sociaux différents. De plus, il faut prendre en compte le fait que de part notre méthodologie, nous avons diffuser le questionnaire de manière numérique (par mail, QR code). Les salariés ayant le plus de chance d’avoir un accès bureautique sont les cadres et les employés puisqu’il s’agit de leur matériel de travail. Les ouvriers, artisans et certaines professions intermédiaires sont donc moins susceptibles d’avoir eu accès au questionnaire. C’est pour cela que nous avons réalisé un travail de terrain pour permettre une « démocratisation » de l’accès au questionnaire, en sensibilisant toutes les CSP présentent sur site.

### 2.4 la commune de résidence des salariés

```{r}
#| include: false

library(sf)
library(dplyr)
library(stringi) #permet de supprimer les accents

##### Script utile pour joindre les géométries des communes #####
#  communes <- st_read("data/COMMUNE.shp")
#  communes_33_40 <- communes %>% filter(INSEE_DEP %in% c("33", "40")) %>% select(NOM,geometry)
#  communes_33_40$NOM <- toupper(stri_trans_general(communes_33_40$NOM, "Latin-ASCII")) #Permet de mettre en Majuscule
#  st_write(communes_33_40, "data/commune_33_40.geojson")
#  communes_33_40 <- st_read("data/commune_33_40.geojson")%>%
#     rename("X4 commune" = NOM )
# # # 
   donnees <- donnees %>%
     mutate(`X4 commune` = sub(" [0-9]{5}$", "", `X4 commune`))%>%
     mutate(`X4 commune` = case_when(
       `X4 commune` == "ST MEDARD EN JALLES" ~ "SAINT-MEDARD-EN-JALLES",
       `X4 commune` == "BAYON SUR GIRONDE" ~ "BAYON-SUR-GIRONDE",
       `X4 commune` == "BELIN BELIET" ~ "BELIN-BELIET",
       `X4 commune` == "CAMBLANES ET MEYNAC" ~ "CAMBLANES-ET-MEYNAC",
       `X4 commune` == "CARIGNAN DE BORDEAUX" ~ "CARIGNAN-DE-BORDEAUX",
       `X4 commune` == "CARBON BLANC" ~ "CARBON-BLANC",
       `X4 commune` == "GIRONDE SUR DROPT" ~ "GIRONDE-SUR-DROPT",
       `X4 commune` == "LA TESTE DE BUCH" ~ "LA TESTE-DE-BUCH",
       `X4 commune` == "LE PIAN SUR GARONNE" ~ "LE PIAN-SUR-GARONNE",
       `X4 commune` == "LEGE CAP FERRET" ~ "LEGE-CAP-FERRET",
       `X4 commune` == "LUDON MEDOC" ~ "LUDON-MEDOC",
       `X4 commune` == "MARTIGNAS SUR JALLE" ~ "MARTIGNAS-SUR-JALLE",
       `X4 commune` == "ST CAPRAIS DE BORDEAUX" ~ "SAINT-CAPRAIS-DE-BORDEAUX",
       `X4 commune` == "ST JEAN D ILLAC" ~ "SAINT-JEAN-D'ILLAC",
       `X4 commune` == "ST LEGER DE BALSON" ~ "SAINT-LEGER-DE-BALSON",
       `X4 commune` == "ST MAGNE" ~ "SAINT-MAGNE",
       `X4 commune` == "ST MORILLON" ~ "SAINT-MORILLON",
       `X4 commune` == "ST QUENTIN DE BARON" ~ "SAINT-QUENTIN-DE-BARON",
       `X4 commune` == "ST SELVE" ~ "SAINT-SELVE",
       `X4 commune` == "VILLENAVE D ORNON" ~ "VILLENAVE-D'ORNON",
       `X4 commune` == "ANDERNOS LES BAINS" ~ "ANDERNOS-LES-BAINS",
       `X4 commune` == "CANTENAC" ~ "MARGAUX-CANTENAC",
       `X4 commune` == "GUJAN MESTRAS" ~ "GUJAN-MESTRAS",
       `X4 commune` == "MARGAUX" ~ "MARGAUX-CANTENAC",
       `X4 commune` == "ST ANDRE DE CUBZAC" ~ "SAINT-ANDRE-DE-CUBZAC",
       TRUE ~ `X4 commune`
     ))
# # # 
   question_commune <- donnees %>%
     left_join(communes_33_40, by = "X4 commune")
# # # 
#   st_write(question_commune, "data/question_commune.geojson", append = TRUE)

question_commune <- st_read("data/question_commune.geojson") 
```

Les répondants résident majoritairement dans des communes proches : Cestas (12 %), Pessac (10,5 %), Léognan (5,2 %), Villeneuve-d’Ornon (5,9 %), Mérignac (4,6 %), Bègles (4,3 %) et Talence (4,9 %). Bordeaux intra-muros regroupe environ 6 % des salariés (tous quartiers confondus). L’aire de résidence est donc assez étendue, couvrant aussi bien la métropole bordelaise que des communes périphériques plus éloignées.  
La zone de Marticot attire des salariés de proximité mais aussi d’un bassin d’emploi plus large, à l’échelle de l’agglomération bordelaise et au-delà. Cette dispersion géographique explique l’importance accordée aux enjeux de mobilité et d’accessibilité. Le fait que plus d’un salarié sur dix habite Cestas traduit aussi une dimension locale forte, où la zone d’activité joue un rôle structurant pour l’emploi de la commune.

###### **carte des Flux Domicile/travail**

```{r}
#| include: false
library(sf)
library(dplyr)
library(tidyverse)
library(leaflet)
library(htmltools)

# --- 1. Coordonnées de destination : Cestas Marticot
dest_lon <- -0.69112
dest_lat <- 44.75134
destination <- st_sf(
  nom = "Cestas - Zone économique de Marticot",
  geometry = st_sfc(st_point(c(dest_lon, dest_lat)), crs = 4326)
)

# donnees <- donnees %>%
#    mutate(`X4 commune` = sub(" [0-9]{5}$", "", `X4 commune`))
# --- 2. Compter le nombre de réponses par commune
nb_reponses <- question_commune %>%
  count(`X4.commune`, name = "nb_reponses")%>%
    # mutate(`X4 commune` = sub(" [0-9]{5}$", "", `X4 commune`))%>%
    # mutate(`X4 commune` = case_when(
    #   `X4 commune` == "ST MEDARD EN JALLES" ~ "SAINT-MEDARD-EN-JALLES",
    #   `X4 commune` == "BAYON SUR GIRONDE" ~ "BAYON-SUR-GIRONDE",
    #   `X4 commune` == "BELIN BELIET" ~ "BELIN-BELIET",
    #   `X4 commune` == "CAMBLANES ET MEYNAC" ~ "CAMBLANES-ET-MEYNAC",
    #   `X4 commune` == "CARIGNAN DE BORDEAUX" ~ "CARIGNAN-DE-BORDEAUX",
    #   `X4 commune` == "CARBON BLANC" ~ "CARBON-BLANC",
    #   `X4 commune` == "GIRONDE SUR DROPT" ~ "GIRONDE-SUR-DROPT",
    #   `X4 commune` == "LA TESTE DE BUCH" ~ "LA TESTE-DE-BUCH",
    #   `X4 commune` == "LE PIAN SUR GARONNE" ~ "LE PIAN-SUR-GARONNE",
    #   `X4 commune` == "LEGE CAP FERRET" ~ "LEGE-CAP-FERRET",
    #   `X4 commune` == "LUDON MEDOC" ~ "LUDON-MEDOC",
    #   `X4 commune` == "MARTIGNAS SUR JALLE" ~ "MARTIGNAS-SUR-JALLE",
    #   `X4 commune` == "ST CAPRAIS DE BORDEAUX" ~ "SAINT-CAPRAIS-DE-BORDEAUX",
    #   `X4 commune` == "ST JEAN D ILLAC" ~ "SAINT-JEAN-D'ILLAC",
    #   `X4 commune` == "ST LEGER DE BALSON" ~ "SAINT-LEGER-DE-BALSON",
    #   `X4 commune` == "ST MAGNE" ~ "SAINT-MAGNE",
    #   `X4 commune` == "ST MORILLON" ~ "SAINT-MORILLON",
    #   `X4 commune` == "ST QUENTIN DE BARON" ~ "SAINT-QUENTIN-DE-BARON",
    #   `X4 commune` == "ST SELVE" ~ "SAINT-SELVE",
    #   `X4 commune` == "VILLENAVE D ORNON" ~ "VILLENAVE-D'ORNON",
    #   TRUE ~ `X4 commune`
    # )) %>%
  mutate(pct = round(100 * nb_reponses / sum(nb_reponses), 1))   # <-- pourcentage



# --- 3. Extraire les centroïdes et joindre le comptage
communes_centroides <- question_commune %>%
  st_centroid() %>%
  st_transform(4326) %>%
  rename(`X4 commune` = `X4.commune`) %>%
  mutate(
    lon = st_coordinates(.)[, 1],
    lat = st_coordinates(.)[, 2]
  ) %>%
  filter(!is.na(lon), !is.na(lat), lon >= -180, lon <= 180, lat >= -90, lat <= 90) %>%
  left_join(nb_reponses, 
            by = "X4 commune") #%>%
  #rename(commune = `Dans quelle commune vivez vous ?`)

# --- 4. Création des lignes depuis chaque commune vers la destination
flux <- purrr::map2(
  communes_centroides$lon, communes_centroides$lat,
  ~ st_linestring(matrix(c(.x, dest_lon, .y, dest_lat), ncol = 2, byrow = FALSE))
) %>%
  st_sfc(crs = 4326) %>%
  st_sf(
    commune = communes_centroides$`X4 commune`
    nb_reponses = communes_centroides$nb_reponses,
    pct = communes_centroides$pct,
    geometry = .
  )

```


```{r}
#| echo: false
#| title: "Carte des flux domiciles/travail"
#| color: red
#| fig.height: 6   # hauteur en pouces (~450px)
#| fig.width: 8    # largeur en pouces

# --- 5. Carte Leaflet
m <- leaflet() %>%
  addTiles(group = "OpenStreetMap") %>%
  addTiles(
    "https://data.geopf.fr/wmts?REQUEST=GetTile&SERVICE=WMTS&VERSION=1.0.0&STYLE=normal&TILEMATRIXSET=PM&FORMAT=image/jpeg&LAYER=ORTHOIMAGERY.ORTHOPHOTOS&TILEMATRIX={z}&TILEROW={y}&TILECOL={x}",
    options = c(WMSTileOptions(tileSize = 256), providerTileOptions(minZoom = 1, maxZoom = 22)),
    attribution = '<a target="_blank" href="https://www.geoportail.gouv.fr/">Geoportail France</a>',
    group = "Ortho IGN"
  ) %>%
  addScaleBar(position = "bottomleft", options = scaleBarOptions(metric = TRUE, imperial = FALSE)) %>%
  addLayersControl(position = "topright", baseGroups = c("OpenStreetMap", "Ortho IGN")) %>%
  
  # Flux : épaisseur proportionnelle au nombre de réponses
  addPolylines(
    data = flux,
    color = "red",
    weight = ~ifelse(is.na(nb_reponses), 1, nb_reponses / 2),
    opacity = 0.7,
    popup = ~paste0("<b>", commune, "</b><br>",
                  "Réponses : ", nb_reponses, "<br>",
                  "Part : ", pct, "%")
  ) %>%
  
  # Communes
  addCircleMarkers(
    data = communes_centroides,
    lng = ~lon, lat = ~lat,
    radius = 3, color = "black", fillColor = "orange", fillOpacity = 0.8,
    popup = ~paste0("<b>", commune, "</b><br>",
                  "Réponses : ", nb_reponses, "<br>",
                  "Part : ", pct, "%")
  ) %>%
  
  # Destination
  addCircleMarkers(
    data = destination,
    color = "blue", fillColor = "blue", radius = 6, fillOpacity = 1,
    popup = ~nom
  ) %>%
  
  addControl(
    html = HTML('
      <div style="background: white; padding: 8px; border-radius: 6px; box-shadow: 0 0 4px rgba(0,0,0,0.3); font-size: 0.9em;">
        <b>Légende</b><br>
        <div style="margin-top: 4px;">
          <span style="display: inline-block; width: 12px; height: 12px; background: blue; border-radius: 50%; margin-right: 6px;"></span>
          ZAE de Marticot
        </div>
        <div style="margin-top: 4px;">
          <span style="display: inline-block; width: 12px; height: 12px; background: black; border-radius: 50%; margin-right: 6px;"></span>
          Communes
        </div>
      </div>
    '),
    position = "bottomright"
  )



m

```

::: {style="margin-top:30px;"} :::

```{r}
#| echo: false

library(dplyr)
library(dplyr)
library(plotly)

table_trajets <- nb_reponses %>%
  rename(
    Commune = `X4 commune`,
    `Nombre de trajets` = nb_reponses,
    `Pourcentages` = pct
  ) %>%
  arrange(desc(`Nombre de trajets`))

# Regroupement des petites communes
table_trajets_grouped <- table_trajets %>%
  mutate(Commune = ifelse(`Nombre de trajets` < 10, "Autre", Commune)) %>%
  group_by(Commune) %>%
  summarise(
    `Nombre de trajets` = sum(`Nombre de trajets`),
    .groups = "drop"
  ) %>%
  mutate(
    Total = sum(`Nombre de trajets`),
    Pourcentages = round(100 * `Nombre de trajets` / Total, 1)
  )

# Graphique circulaire
plot_ly(
  data = table_trajets_grouped,
  labels = ~Commune,
  values = ~`Nombre de trajets`,
  type = "pie",
  hole = 0.6,
  textinfo = "label+percent+value",
  hoverinfo = "label+value+percent",
  marker = list(line = list(color = "#FFFFFF", width = 1))
) %>%
  layout(
    title = list(
      text = "Répartition des trajets par commune de résidence",
      x = 0.5,
      xanchor = "center",
      font = list(color = "red")
    ),
    margin = list(t = 90, b = 90)
  ) %>%
  config(responsive = TRUE)


```

::: {style="margin-top:30px;"} :::

```{r}
#| title: "Tableau récapitulatif"
#| echo: false


library(dplyr)
library(DT)

# Renommer et trier
table_trajets <- nb_reponses %>%
  rename(
    Commune = `X4 commune`,
    `Nombre de trajets` = nb_reponses,
    `Pourcentages` = pct
  ) %>%
  arrange(desc(`Nombre de trajets`))

datatable(
  table_trajets,
  #extensions = 'Buttons',
  options = list(
    pageLength = 15,
    autoWidth = TRUE,
    order = list(list(1, 'desc')),
    dom = 'Bfrtip',
    #buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
    columnDefs = list(
      list(width = '200px', targets = 0),   # largeur colonne "Commune"
      list(width = '120px', targets = 1),   # largeur colonne "Nombre de trajets"
      list(width = '120px', targets = 2),   # largeur colonne "Pourcentages"
      list(className = 'dt-center', targets = c(1,2))
  )
  ),
  rownames = FALSE
) %>%
  formatStyle(
    "Nombre de trajets",
    backgroundColor = styleInterval(
      c(5, 10),
      c('#fff7ec', '#fd8d3c', '#e31a1c')
    ),
    color = "black",
    fontWeight = "bold"
  )

```
::: {style="margin-top:30px;"} :::



